{"version":3,"sources":["Components/Header/Header.js","Components/Banner/Banner.js","Components/SearchBar/SearchBar.js","Components/ResultsItem/ResultsItem.js","Components/Results/Results.js","Components/NominationsItem/NominationsItem.js","Components/Nominations/Nominations.js","Components/AddedNomination/AddedNomination.js","App.js","reportWebVitals.js","index.js"],"names":["Header","this","props","showNominations","nominatedMovieslength","className","onClick","src","alt","Component","Banner","API_URL","API_KEY","MOVIE_ATTRIBUTE","SearchBar","state","userSearch","updateResults","e","preventDefault","updateUserSearch","value","target","trim","setState","resetCurrentPage","getMovies","axios","get","page","then","data","Error","updateErrorMessage","updateMovies","getTotalResults","totalResults","Search","prevProps","onSubmit","type","name","onChange","placeholder","ResultsItem","movie","nominateMovie","checkIfMovieNominated","Poster","Title","Year","imdbID","style","backgroundColor","borderColor","color","id","Results","movieImbID","i","nominatedMovies","length","movies","currentPage","totalPages","errorMessage","prevPage","nextPage","map","NominationsItem","removeMovie","Nominations","movieRemoved","movieID","movieName","movieYear","setTimeout","showNominationsComponent","AddedNominations","recentlyNominated","closeNominationConfirmation","App","maxmimumNominationsReached","prevState","nominationConfirmation","document","getElementsByClassName","display","movieImbdID","movieTitle","moviePoster","updatednominatedMovies","push","disableButton","localStorage","removeItem","setItem","JSON","stringify","getIndexOfMovie","splice","enableButton","buttonID","getElementById","disabled","intTotalResults","parseInt","remainder","newMovies","newErrorMessage","getItem","parse","AddedNomination","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.25b8d638.chunk.js","sourcesContent":["import React, { Component } from 'react'; \nimport './headerStyle.css';\n\n/**\n * The Header class represents the header component which contains \n * the name logo for the website and access to your nominations.\n */\nclass Header extends Component{\n    \n    render(){\n\n        /**\n         * showNominations: is a function that reveals the nomination component on click\n         * nominatedMovieslength: is the length of the array which contains information \n         * about all of the nominated movies.\n         */\n        const { showNominations, nominatedMovieslength } = this.props;\n\n        return(\n            <div className=\"header\">\n\n               <div className=\"logo-name-div\">\n                    <h1 className=\"logo-name\">THE SHOPPIES</h1>\n               </div>\n               \n                <div className=\"nomination-view\">\n                   \n                    <h2 className=\"nomination-text\" onClick={showNominations}>NOMINATIONS</h2>\n                    <img className=\"logo-image\" src=\"images/shopify-logo.png\" onClick={showNominations} alt=\"Offical Sponsor\"></img>\n                    <div className=\"circle\">{nominatedMovieslength}</div>\n\n                </div>\n\n            </div>            \n        )\n    }\n\n}\n\nexport default Header;\n\n","import React, { Component } from 'react';\nimport './bannerStyle.css'; \n\n/** \n * The Banner Class represents the banner notifying the user \n * that they have reached the maximum number of nominations.\n */\nclass Banner extends Component{\n\n    render(){\n\n        return(\n\n            <div className=\"banner\"> \n                <h4 className=\"banner-message\">YOU HAVE NOMINATED THE MAXIMUM AMOUNT OF MOVIES!</h4>\n            </div>\n            \n        )\n    }\n}\n\nexport default Banner;","import React, { Component } from 'react'; \nimport axios from 'axios';\nimport './searchBarStyle.css';\n\n\nconst API_URL = 'https://www.omdbapi.com/'; \nconst API_KEY = '1999d2f8';\nconst MOVIE_ATTRIBUTE = \"type=movie\"; \n\n/**\n * The SearchBar class represents the search bar and is where the calls to \n * the API are made using AXIOS.\n */\nclass SearchBar extends Component{\n\n    /**\n     * userSearch: is where the users input whill be saved\n     */\n    state = {\n        userSearch: ''\n    }\n\n    /**\n     * this takes care of the subsquent API calls by checking if the page\n     * to display more results\n     * @param {*} prevProps \n     */\n    componentDidUpdate(prevProps){\n        if (prevProps.page !== this.props.page){\n            this.getMovies();\n        }\n    }\n    \n    /**\n     * this prevents the page from refreshing if someone hits enter on their search\n     * @param {Event} e \n     */\n    updateResults = (e) =>{     \n        e.preventDefault();\n    }\n\n    /**\n     * this updates the state of userSearch, resets page counter \n     * if the user is entering a new search, and calls the OMBD API\n     * @param {Event} e \n     */\n    updateUserSearch = (e) =>{\n        \n        let value = e.target.value.trim();\n\n        if(value !== '' && value !== ' '){\n\n            this.setState({\n                userSearch: e.target.value.trim()\n            });\n\n            this.props.resetCurrentPage() \n            this.getMovies();\n        }\n\n    }\n\n    /**\n     * this function gets the requested information from the API to display in the Results \n     * component, it also calls: \n     * updateErrorMessage function: which updates the state in the app level component to\n     * tell the Results Component to display an error\n     * updateMovies function: which updates the state in the app level component to\n     * tell the Results Component which movies to display\n     * getTotalResults function: which updates the state in the app level component to\n     * by telling it the total number of results which is then used in total page \n     * calculation\n     */ \n    getMovies = () => {\n\n        axios.get(`${API_URL}?apikey=${API_KEY}&${MOVIE_ATTRIBUTE}&s=${this.state.userSearch}&page=${this.props.page}`)\n            .then(({ data }) =>{\n                if(data.Error){\n                    this.props.updateErrorMessage(data.Error);\n                    this.props.updateMovies([], this.state.userSearch);\n                }else{\n                    this.props.getTotalResults(data.totalResults);\n                    this.props.updateMovies(data.Search, this.state.userSearch);\n                }\n            })\n\n    }\n\n    render(){\n      \n        return(\n            <div className=\"searchBar\">\n\n                <form onSubmit={this.updateResults}>\n                    <input className=\"search-bar\" type=\"text\" name=\"search\" onChange={this.updateUserSearch} placeholder=\"Search for a Movie\"></input>\n                </form>\n\n            </div>\n        )\n    }\n}\n\nexport default SearchBar;","import React, { Component } from 'react'; \nimport './resultsItemStyle.css';\n\n/**\n * The ResultsItem class represents the ResultsItem Component which is \n * a singular movie that will need to be displayed.\n */\nclass ResultsItem extends Component{\n\n    render(){\n\n        /**\n         * movie: is an object with all the information about said movie \n         * nominateMovie: is the function that adds a movie to the Nomination List \n         * checkIfMovieNominated is the function that checks if a movie was nominated \n         * so it can disable the button\n         */\n        const { movie, nominateMovie, checkIfMovieNominated} = this.props;\n\n        /** this style is used to disable the nomination button if the movie has already been nominated */\n        const style = {\n            backgroundColor: \"#3C333C\", \n            borderColor: \"#3C333C\",\n            color: \"white\"\n        }\n\n        return(\n            <div className=\"movie-item\">\n                <img className=\"movie-poster\" key={movie.Poster} src={movie.Poster} alt={movie.Title}></img>\n                <h2 className=\"movie-name\" key={movie.imdbID}>{movie.Title} ({movie.Year})</h2>\n                <button key={movie.Title} style={checkIfMovieNominated(movie.imdbID) ? style : null}id={movie.imdbID} className=\"movie-button\" onClick={e => nominateMovie(movie.imdbID, movie.Title, movie.Year, movie.Poster)}>Nominate</button>\n            </div>\n        )\n    }\n}\n\nexport default ResultsItem;\n","import React, { Component } from 'react'; \nimport ResultsItem from '../ResultsItem/ResultsItem';\nimport './resultsStyle.css';\n\n/**\n * Results class represents the results component which displays \n * the results of the user search and allows the user to nominate a \n * movie and go to the next page of results.\n */\nclass Results extends Component{\n   \n    /**\n     * this function will check if any of the movies being displayed \n     * have already been nominated \n     * @param { String } movieImbID \n     */\n    checkIfMovieNominated = (movieImbID) =>{\n        for(let i = 0; i < this.props.nominatedMovies.length; i++){\n            if (this.props.nominatedMovies[i][0] === movieImbID){\n                return true;\n            }\n        }\n        return false;\n    }\n\n    render(){\n        \n        /**\n         * movies: this is the array of movies to display \n         * userSearch: this is the search the user made\n         * currentPage: this is the page number of the results the user is on\n         * totalPages: this is the total number of pages \n         * nominateMovie: this function is in the app level component and helps to \n         * make sure that the movie nominated is added to the nominatedMovies array\n         * prevPage: this is a function that allows the user to go to the previous page \n         * nextPage: this is a function that allows the user to go to the next page \n         */\n        const { movies, userSearch, currentPage, totalPages, nominateMovie, errorMessage, prevPage, nextPage } = this.props\n            \n        return(\n            <div className=\"results\">\n                \n                {\n                    movies.length > 0 ? \n                    <div>\n                    <div className=\"movie-list\">\n                      \n                        <h1 className=\"results-message\">Results for \"{userSearch}\"</h1>\n                        <br></br>\n                        \n                            {movies.map(movie => \n\n                                <ResultsItem movie={movie} nominateMovie={nominateMovie} checkIfMovieNominated={this.checkIfMovieNominated}/>\n\n                            )}\n\n                    </div> \n                    \n                    <div className=\"buttons\">\n                        <button className={currentPage === 1 ? \"disable\" : \"prev-next-button\"} onClick={e => prevPage()}>Previous</button>\n                        <button className={currentPage === totalPages ? \"disable\" : \"prev-next-button\"} onClick={e => nextPage()}>Next</button>\n                    </div>\n\n                    </div>\n                 :  \n                    <h1 className=\"error-messages\">{errorMessage ? errorMessage + \" Please try again!\"  :  null}</h1>\n\n                }\n\n            </div>\n        )\n    }\n}\n\nexport default Results;","import React, { Component } from 'react';\nimport './nominationsItemStyle.css'; \n\n/**\n * The NominationsItem class represents the NominationsItem component \n * which is a singular nominated movie.\n */\nclass NominationsItem extends Component{\n\n    render(){\n\n        /**\n         * movie: this is an object that represents the details of the movie \n         * removeMovie: is a function that removes a nominated movie from \n         * the array of nominatedMovies (located in the app component)\n         */\n        const { movie, removeMovie} = this.props;\n\n        return(\n            <div className=\"nominated-movie-item\">\n                <img src={movie[3]} alt={movie[3]}></img>\n                <h4 className=\"nominated-movies-details\" key={movie}>{movie[1]} ({movie[2]})</h4>\n                <button key={movie[0]} id={movie[1]} className=\"remove-button\" onClick={e => removeMovie(movie[0], movie[1], movie[2])}>Remove</button>\n            </div>\n\n        )\n    }\n}\n\nexport default NominationsItem;\n","import React, { Component } from 'react'; \nimport NominationsItem from '../NominationsItem/NominationsItem';\nimport './nominationsStyle.css'; \n\n/**\n * The Nominations class represents the component which when you click \n * nominations or the Shopify bag in the header it is revealed. \n */\nclass Nominations extends Component{\n\n    /**movieRemoved: this is the name of the movie that was recently removed*/\n    state = { \n        movieRemoved: \"\"\n    }\n    \n    /**\n     * updates the state with the movie that was just removed\n     * and also calls upon the removeMovie function from the props, \n     * which updates the state in the app level component by updating \n     * the nominatedMovies array by deleting chosen movie.\n     * @param { String } movieID represents movie IMBD ID \n     * @param { String } movieName represents movie name\n     * @param { String } movieYear represents the date movie was released\n     */\n    removeMovie = (movieID, movieName, movieYear) =>{\n        this.setState({\n            movieRemoved: movieName\n        }); \n\n        this.props.removeMovie(movieID, movieName, movieYear);\n\n        setTimeout(()=>{\n            this.setState({\n                movieRemoved: \"\"\n            });\n        }, 5000);\n    }\n    \n    render(){\n\n        /**\n         * nominatedMovies: is the array containing information about movies that were nominated.\n         * showNominationsComponent: is the function located in the app level component which displays \n         * and hides the Nominations component.\n         */\n        const { nominatedMovies, showNominationsComponent } = this.props;\n        const { movieRemoved } = this.state;\n\n        return(\n    \n            <div className=\"nominations\">\n                <div className=\"nominations-container\">\n                    <h1 className=\"nominated-section-heading\">YOUR NOMINATIONS</h1>\n                    {movieRemoved && <h2 className=\"remove-notification\">You removed {movieRemoved}!</h2>}\n        \n                        <div className=\"nominated-movie-list\">\n                            {   \n                                nominatedMovies.map(movie =>\n                                   <NominationsItem movie={movie} removeMovie={this.removeMovie}/>\n                                )\n                            }\n                        </div>\n\n                        <button className=\"nominated-close-button\" onClick={showNominationsComponent}>Close</button>\n                </div>\n\n            </div>\n        \n\n        )\n    }\n}\n\nexport default Nominations;","import React, { Component } from 'react'; \nimport './addedNominationStyle.css'; \n\n/**\n * The AddedNominations component is a modal in which a confirmation appears \n * that the movie you nominated was successfully added to your list of \n * nominations.\n */\n\nclass AddedNominations extends Component{\n    \n    render(){\n        \n        /**\n         * recentlyNominated: is an array that contains [movieName, movieYear, moviePoster]\n         * closeNominationConfirmation: is a function that closes the AddedNominations component\n         */\n        const {recentlyNominated, closeNominationConfirmation } = this.props\n        \n        return(\n            \n            <div className=\"addedNominations\">\n\n                <div className=\"nominationsContainer\">\n                    \n                    <div className=\"sucessful-message\"> \n                        <h1 className=\"successful\">SUCCESSFULLY NOMINATED!</h1>\n                    </div>\n                    \n                    <div className=\"movie-container\">\n                        <div className=\"image-contianer\"> \n                            <img src={recentlyNominated[2]} alt={recentlyNominated[0]}></img>\n                        </div>\n\n                        <div className=\"movie-details\">\n                            <h2>{recentlyNominated[0]}</h2>\n                            <h3>{recentlyNominated[1]}</h3>\n                            <button className=\"close-button\" onClick={closeNominationConfirmation}>Close</button>\n                        </div>\n                    </div>\n                    \n\n                </div>\n\n            </div>\n        )\n    }\n}\n\nexport default AddedNominations;","import React, { Component } from 'react';\nimport './App.css';\n\nimport Header from './Components/Header/Header';\nimport Banner from './Components/Banner/Banner';\nimport SearchBar from './Components/SearchBar/SearchBar';\nimport Results from './Components/Results/Results';\nimport Nominations from './Components/Nominations/Nominations';\nimport AddedNominations from './Components/AddedNomination/AddedNomination';\n\n/**\n * The App class represents the app component is acting as the global state \n * and where any piece of data that will be required by any component will be\n * available in this component. This component also contains all of the functions\n * which interact which the global state and the app as a whole.\n */\nclass App extends Component{\n\n  /**\n   * movies: this is an array which contains the movies that will be displayed \n   * according to the users' searches\n   * nominatedMovies: this is an array which contains the movies that have been \n   * nominated\n   * userSearch: this is a string containing the user's search\n   * errorMessag: this a string which will be changed to display any error the API\n   * sends back to us \n   * showNominations: this boolean controls whether to hide or display the Nominations\n   * component\n   * maxmimumNominationsReached: this boolean decides whether to display the Banner \n   * Component (if 5 nominations have been made)\n   * recentlyNominated: this is an array which contains the movie poster, movie name, \n   * and movie year of the movie that was just nominated \n   * totalPages: this is the number which contains the total pages of a user search\n   * currentPage: this is the nummber of the current page of the user search results\n   */\n  state = {\n    movies: [], \n    nominatedMovies:[],\n    userSearch: \"\",\n    errorMessage: \"\",\n    showNominations: false,\n    maxmimumNominationsReached: false,\n    recentlyNominated: [],\n    totalPages: 0,\n    currentPage: 1,\n  }\n\n  /**\n   * this function checks if the user had previously visited the website \n   * and had nominated movies, if so those movies are assigned to the \n   * nominatedMovies array, otherwise a blank array is sent into memory\n   */\n  componentDidMount(){\n\n    if(localStorage.getItem('nominatedMovies')){\n\n      this.setState({\n        nominatedMovies: JSON.parse(localStorage.getItem('nominatedMovies'))\n      });\n\n    }else{\n      localStorage.setItem('nominatedMovies', JSON.stringify([]));\n    }\n\n  }\n\n  /**\n   * this function displays or hides the Nominations component based on \n   * which button is clicked\n   */\n  showNominationsComponent = () =>{\n\n    this.setState(prevState =>{\n      return{\n        showNominations: !prevState.showNominations\n      }\n    });\n\n  }\n\n  /**\n   * this function will open the AddedNominations Component if a movie\n   * was nominated\n   */\n  nominationConfirmation = () =>{\n    let getComponent = document.getElementsByClassName('addedNominations')[0]; \n    getComponent.style.display = \"block\";\n  }\n\n\n  /**\n   * this function will close the AddedNominations Component if a movie\n   * was nominated and the user clicks the close button\n   */\n  closeNominationConfirmation = () =>{\n    let getComponent = document.getElementsByClassName('addedNominations')[0]; \n    getComponent.style.display = \"none\";\n  }\n\n\n  /**\n   * this function adds a movie to the nominatedMovies array \n   * and updates the array in localStorage\n   * @param { String } movieImbdID represents the movie IMBD ID\n   * @param { String } movieTitle represents the movie name\n   * @param { String } movieYear represents the year the movie was released\n   * @param { String } moviePoster represents the poster of the movie\n   */\n  nominateMovie = (movieImbdID, movieTitle, movieYear, moviePoster) =>{\n\n    if(this.state.nominatedMovies.length === 5){\n      \n        this.setState({\n          maxmimumNominationsReached: true\n        });\n        \n        setTimeout(()=>{\n          this.setState({\n            maxmimumNominationsReached: false\n          });\n        }, 3000);\n        \n    }else{\n\n        var updatednominatedMovies = [...this.state.nominatedMovies]; \n        updatednominatedMovies.push([movieImbdID, movieTitle, movieYear, moviePoster]); \n        \n        this.setState({\n            nominatedMovies: updatednominatedMovies, \n            recentlyNominated: [movieTitle, movieYear, moviePoster], \n        });\n\n\n        this.disableButton(movieImbdID);\n        localStorage.removeItem('nominatedMovies'); \n        localStorage.setItem('nominatedMovies', JSON.stringify(updatednominatedMovies));\n        this.nominationConfirmation(); \n\n    }\n  \n  }\n\n  /**\n   * this function removes a movie from nomination (nominatedMovies array)\n   * and resets all button functionality \n   * @param { String } movieImbdID represents the movie IMBD ID \n   * @param { String } movieTitle represents the movie nmae\n   * @param {String } movieYear represents the year in which the movie was released\n   */\n  removeMovie = (movieImbdID, movieTitle, movieYear) =>{\n\n      let nominatedMovies = [...this.state.nominatedMovies]; \n      let getIndexOfMovie = -1;\n      \n      for(let i = 0; i < nominatedMovies.length; i++){\n          if(nominatedMovies[i][0] === movieImbdID){\n              getIndexOfMovie = i;\n              break;\n          }\n      }\n      \n      nominatedMovies.splice(getIndexOfMovie, 1); \n\n      this.setState({\n          nominatedMovies: nominatedMovies\n      });\n    \n      \n      this.enableButton(movieImbdID);\n      localStorage.removeItem('nominatedMovies'); \n      localStorage.setItem('nominatedMovies', JSON.stringify(nominatedMovies));\n\n  }\n\n  /**\n   * this function disables a button for the movie that was nominated\n   * @param { String } buttonID represents ID of button\n   */\n  disableButton = (buttonID) =>{\n    if(document.getElementById(buttonID)){\n      document.getElementById(buttonID).disabled = true;\n      document.getElementById(buttonID).style.backgroundColor = \"#3C333C\";\n      document.getElementById(buttonID).style.borderColor = \"#3C333C\";\n      document.getElementById(buttonID).style.color = \"white\";\n    }  \n  }\n  /**\n   * this function enables a button for the movie that was removed from nomination\n   * @param { String } buttonID represents ID of button\n   */\n  enableButton = (buttonID) =>{\n    if(document.getElementById(buttonID)){\n      document.getElementById(buttonID).disabled = false;\n      document.getElementById(buttonID).style.backgroundColor = \"#C4994D\"; \n      document.getElementById(buttonID).style.borderColor = \"#C4994D\";\n      document.getElementById(buttonID).style.color = \"#070605\";\n    }\n  }\n\n  /**\n   * this function calculates the total number of pages based on the \n   * number of total search results and updates totalPages accordingly\n   * @param { String } totalResults represents the total number of results\n   */\n  getTotalResults = (totalResults) =>{\n\n    let intTotalResults = parseInt(totalResults);\n    let remainder = intTotalResults % 10; \n    let roundToTen = 10 - remainder; \n    let addBack = remainder + roundToTen; \n    let totalPages = intTotalResults - remainder + addBack; \n\n    this.setState({\n      totalPages: totalPages/10\n    })\n\n  }\n\n  /**\n   * this functin updates the movies and userSearch parts of the state, \n   * by getting the movies outputted by the API call in the SearchBar component\n   * @param { Array } newMovies represents the movies to display from user search\n   * @param { String} userSearch represents the search inputted by the user \n   */\n  updateMovies = (newMovies, userSearch) =>{\n\n    this.setState({\n      movies: newMovies,\n      userSearch: userSearch\n    });\n\n  }\n\n  /**\n   * this function updates the error message that was retrieved from the API call \n   * in the SearchBar Component\n   * @param { String } newErrorMessage \n   */\n  updateErrorMessage = (newErrorMessage) =>{\n\n    this.setState({\n      errorMessage: newErrorMessage\n    });\n\n  }\n  \n  /**\n   * this function moves the user to the next page of results\n   * when they click the next button\n   */\n  nextPage = () =>{\n\n    if(this.state.currentPage + 1 <= this.state.totalPages){\n\n      this.setState(prevState =>{\n        return{\n          currentPage: prevState.currentPage + 1\n        }\n      });\n\n    }\n\n  }\n\n  /**\n   * this function moves the user to the previous page of results\n   * when they click the previous button\n   */\n  prevPage = () =>{\n    if(this.state.currentPage - 1 > 0){\n      this.setState(prevState =>{\n        return{\n          currentPage: prevState.currentPage -1 \n        }\n      });\n    }\n  }\n\n  /**\n   * this function resets the users current page position to 1 \n   * when they do a new search result\n   */\n  resetCurrentPage = () =>{\n    this.setState({\n      currentPage: 1\n    })\n  }\n  \n  render(){\n\n    const {\n      movies, \n      nominatedMovies,\n      userSearch,\n      errorMessage,\n      showNominations,\n      maxmimumNominationsReached,\n      recentlyNominated,\n      totalPages,\n      currentPage,\n    } = this.state\n\n    return(\n\n      <div className=\"App\">\n\n        <Header \n          showNominations={this.showNominationsComponent} \n          nominatedMovieslength={nominatedMovies.length}\n        />\n\n        {maxmimumNominationsReached && <Banner/>}\n\n        <SearchBar \n          updateMovies={this.updateMovies}\n          updateErrorMessage={this.updateErrorMessage}\n          getTotalResults={this.getTotalResults}\n          page={currentPage}\n          resetCurrentPage={this.resetCurrentPage}\n        />\n\n        <Results \n          movies={movies}\n          userSearch={userSearch}\n          nominateMovie={this.nominateMovie}\n          errorMessage={errorMessage}\n          nominatedMovies={nominatedMovies}\n          currentPage={currentPage}\n          totalPages={totalPages}\n          prevPage={this.prevPage}\n          nextPage={this.nextPage}\n        />\n\n        {showNominations && \n        <Nominations \n          nominatedMovies={nominatedMovies}\n          removeMovie={this.removeMovie}\n          showNominationsComponent={this.showNominationsComponent}\n        />\n        }\n\n        <AddedNominations \n          recentlyNominated={recentlyNominated}\n          closeNominationConfirmation={this.closeNominationConfirmation}\n        />\n\n      </div>\n\n    )\n  }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}